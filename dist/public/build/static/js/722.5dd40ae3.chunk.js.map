{"version":3,"file":"static/js/722.5dd40ae3.chunk.js","mappings":"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","sources":["app/pages/ResetPassword.tsx"],"sourcesContent":["import { Form, FloatingLabel, Button, Row, Container, Col } from \"react-bootstrap\"\nimport styles from '../styles/Form/AuthForm.module.css'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { useState } from \"react\"\nimport { useLocation, useNavigate, useParams } from \"react-router\"\nimport { Formik } from \"formik\"\nimport * as yup from 'yup'\nimport { ToastContainer, toast, Slide } from 'react-toastify'\nimport \"react-toastify/dist/ReactToastify.css\";\nimport useLoader from \"../hooks/useLoader\"\nimport useProgress from \"../hooks/useProgress\"\nimport { useSetPasswordMutation } from \"../features/authentication/authApi\"\nimport { AuthErrorResponse } from \"../types/authSliceTypes\"\n\nconst initialValues = {\n    password: '',\n    confirm: ''\n}\n\nconst schema = yup.object().shape({\n    password: yup\n        .string()\n        .trim()\n        .required('Password is required!')\n        .max(16, 'Can be max 16 chars length!')\n        .min(8, 'Must be min 8 chars length!'),\n    confirm: yup\n        .string()\n        .trim()\n        .required('Confirm password!')\n        .max(16, 'Can be max 16 chars length!')\n        .min(8, 'Must be min 8 chars length!')\n})\n\n\nconst ResetPassword: React.FC = () => {\n    const navigate = useNavigate()\n    const [passwordVisible, setPasswordVisible] = useState(false)\n    const [toLogin, setToLogin] = useState(false)\n    const loader = useLoader()\n    const progress = useProgress()\n    const params = useParams()\n    const [setPassword] = useSetPasswordMutation()\n    const location = useLocation()\n\n    function handleFormSubmit(values: typeof initialValues) {\n        if (toLogin) {\n            navigate('/login', { state: { from: location } })\n            return\n        }\n        loader.on()\n        progress.set(15)\n        setPassword({ password: values.password, token: params?.token })\n            .unwrap()\n            .then(res => {\n                toast('Success, now you can login!')\n                setToLogin(true)\n            })\n            .catch(err => toast((err as AuthErrorResponse).message))\n            .finally(() => {\n                loader.off()\n                progress.done()\n            })\n\n    }\n\n    return (\n        <Container>\n            <Row className='justify-content-center'>\n                <Col md={6} lg={5} xl={4} className=\"mt-5\" >\n                    <div className={styles.container}>\n                        <h1 className=\"mb-3\">Reset password</h1>\n                        <Formik\n                            initialValues={initialValues}\n                            onSubmit={(values) => handleFormSubmit(values)}\n                            validationSchema={schema}>\n                            {({ handleBlur,\n                                handleChange,\n                                handleSubmit,\n                                values,\n                                touched,\n                                errors }) => (\n                                <Form noValidate onSubmit={handleSubmit}>\n                                    <Form.Group className=\"mb-3\">\n                                        <FloatingLabel\n                                            controlId=\"passwordInput\"\n                                            label=\"Password\"\n                                            className={styles.label}>\n                                            <Form.Control\n                                                type={passwordVisible ? 'text' : 'password'}\n                                                placeholder=\"password\"\n                                                name=\"password\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.password}\n                                                isValid={touched.password && !errors.password}\n                                                isInvalid={touched.password && !!errors.password} />\n                                            <div onClick={() => { setPasswordVisible(!passwordVisible) }}\n                                                className={styles['password-icon']}>\n                                                {passwordVisible\n                                                    ?\n                                                    <FontAwesomeIcon icon={[\"fas\", \"eye\"]} />\n                                                    :\n                                                    <FontAwesomeIcon icon={[\"fas\", \"eye-slash\"]} />}\n                                            </div>\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {errors.password}\n                                            </Form.Control.Feedback>\n                                            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                                        </FloatingLabel>\n                                        <FloatingLabel\n                                            controlId=\"confirmPasswordInput\"\n                                            label=\"Confirm password\"\n                                            className={styles.label}>\n                                            <Form.Control\n                                                type={passwordVisible ? 'text' : 'password'}\n                                                placeholder=\"confirm password\"\n                                                name=\"confirm\"\n                                                onChange={handleChange}\n                                                onBlur={handleBlur}\n                                                value={values.confirm}\n                                                isValid={touched.confirm\n                                                    && !errors.confirm && (values.confirm === values.password)}\n                                                isInvalid={touched.confirm && (!!errors.confirm || (values.confirm !== values.password))}\n                                            />\n                                            <div onClick={() => { setPasswordVisible(!passwordVisible) }}\n                                                className={styles['password-icon']}>\n                                                {passwordVisible\n                                                    ?\n                                                    <FontAwesomeIcon icon={[\"fas\", \"eye\"]} />\n                                                    :\n                                                    <FontAwesomeIcon icon={[\"fas\", \"eye-slash\"]} />}\n                                            </div>\n                                            <Form.Control.Feedback type=\"invalid\">\n                                                {values.confirm !== values.password ? 'Password not match!' : errors.confirm}\n                                            </Form.Control.Feedback>\n                                            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                                        </FloatingLabel>\n                                    </Form.Group>\n                                    <Row style={{ justifyContent: 'end' }}>\n                                        <Button\n                                            variant=\"primary\"\n                                            className={styles.button}\n                                            onClick={async () => {\n                                                navigate('/')\n                                            }}\n                                        >\n                                            Back\n                                        </Button>\n                                        <Button variant=\"primary\" type=\"submit\" className={styles.button}>\n                                            {toLogin ? 'Login' : 'Reset'}\n                                        </Button>\n                                    </Row>\n                                    <ToastContainer\n                                        className={styles['toast-container']}\n                                        position=\"top-center\"\n                                        autoClose={5000}\n                                        hideProgressBar={false}\n                                        newestOnTop={false}\n                                        closeOnClick\n                                        rtl={false}\n                                        transition={Slide}\n                                        pauseOnFocusLoss\n                                        draggable\n                                        pauseOnHover\n                                        theme=\"light\"\n                                    />\n                                </Form>\n                            )}\n\n                        </Formik>\n                    </div>\n                </Col>\n            </Row>\n        </Container>\n\n    )\n}\n\nexport default ResetPassword"],"names":["initialValues","password","confirm","schema","yup","shape","trim","required","max","min","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","passwordVisible","setPasswordVisible","_useState3","_useState4","toLogin","setToLogin","loader","useLoader","progress","useProgress","params","useParams","_useSetPasswordMutati","useSetPasswordMutation","setPassword","location","useLocation","_jsx","Container","children","Row","className","Col","md","lg","xl","_jsxs","styles","Formik","onSubmit","values","state","from","on","set","token","unwrap","then","res","toast","catch","err","message","finally","off","done","handleFormSubmit","validationSchema","_ref","handleBlur","handleChange","handleSubmit","touched","errors","Form","noValidate","FloatingLabel","controlId","label","type","placeholder","name","onChange","onBlur","value","isValid","isInvalid","onClick","FontAwesomeIcon","icon","style","justifyContent","Button","variant","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","stop","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","transition","Slide","pauseOnFocusLoss","draggable","pauseOnHover","theme"],"sourceRoot":""}